EFFICIENT IMAGE CACHING STRATEGY
===============================

Based on successful Android implementation patterns (DriveShow app), this system provides robust image handling and memory management.

KEY FEATURES
-----------

1. Memory Management
   - Uses 40% of available heap memory (like Android's Glide)
   - Fallback to 250MB if memory API unavailable
   - Active memory pressure monitoring
   - LRU (Least Recently Used) eviction policy

2. Image Processing
   - Supports: JPEG, PNG, GIF, BMP, WEBP
   - Tracks image dimensions
   - Creates efficient object URLs
   - Handles authorization headers for cloud services

3. Performance Features
   - Preloading mechanism for smooth transitions
   - Memory cleanup on pressure
   - Caches with max-age headers
   - Error resilient with fallbacks

USAGE EXAMPLES
-------------

Basic caching:
    const cachedUrl = await imageCache.cacheImage(imageUrl);

With auth headers (Drive/Dropbox):
    const cachedUrl = await imageCache.cacheImage(imageUrl, {
      headers: {
        'Authorization': `Bearer ${accessToken}`
      }
    });

Preload multiple images:
    imageCache.preloadImages([url1, url2, url3]);

MEMORY MONITORING
---------------
Cache automatically monitors and cleans up when:
- Memory usage exceeds 80% of allocation
- Manual cleanup is triggered
- New images would exceed memory limit

IMPLEMENTATION NOTES
------------------
- Based on successful patterns from Android DriveShow app
- Tested with both Google Drive and Dropbox APIs
- Handles token authentication properly
- Manages memory efficiently in browser environment

WORKING IMPLEMENTATION
-------------------
1. Drive Service Pattern:
   - Use proper URL construction with alt=media
   - Cache URLs before returning to store
   - Pass auth headers with each request
   - Log processed images for debugging

2. Store Integration:
   - Map image objects to their cached URLs
   - Set initial currentIndex correctly
   - Update currentImage based on array state
   - Include transitionEffect for animations

3. Auth Flow:
   - Login first
   - List folders after authentication
   - Select folder to load images
   - Cache and display images

Example of working image loading chain:
```javascript
// In DriveManager
const imageUrl = `https://www.googleapis.com/drive/v3/files/${file.id}?alt=media`;
const cachedUrl = await this.imageCache.cacheImage(imageUrl, {
  headers: {
    'Authorization': `Bearer ${this.accessToken}`
  }
});

// In Store
const imageUrls = images.map(img => img.url);
const newState = {
  images: [...state.images, ...imageUrls],
  currentIndex: state.images.length === 0 ? 0 : state.currentIndex,
  currentImage: state.images.length === 0 ? imageUrls[0] : state.currentImage,
  transitionEffect: 1
};
```

REUSABILITY PATTERN
-----------------
To reuse this caching strategy in other projects:

1. Core Components Required:
   - imageCache.js: Main caching logic
   - security.js: Token handling utilities
   - cloud service adapters (like driveService.js, dropboxService.js)

2. Integration Steps:
   a. Copy the ImageCache class
   b. Initialize with cloud service:
      const imageCache = new ImageCache();
      const cloudService = new CloudService(token, imageCache);
   c. Use in image loading:
      const cachedUrl = await imageCache.cacheImage(url, authOptions);

3. Memory Considerations:
   - Adjust maxMemorySize based on target devices
   - Monitor memory usage in production
   - Consider implementing disk cache for larger collections

4. Error Handling:
   - Always provide fallback URLs
   - Implement retry logic for failed loads
   - Monitor cache hits/misses

5. Performance Tips:
   - Preload next few images
   - Clean up unused object URLs
   - Use appropriate max-age headers 